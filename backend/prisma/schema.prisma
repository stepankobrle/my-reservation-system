// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Restaurant {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  tables        Table[]
  menus         Menu[]
  reservations  Reservation[]
  notifications Notification[]
  MenuTab       MenuTab[]
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  password     String
  name         String
  role         Role       @default(EMPLOYEE)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Notification Notification[]
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

model Guest {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  phone     String

  reservations  Reservation[]
  notifications Notification[] // zpětný vztah
}

model Reservation {
  id              String            @id @default(uuid())
  restaurantId    String
  guestId         String
  tableId         String?
  reservationTime DateTime
  peopleCount     Int
  status          ReservationStatus
  note            String?

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  guest      Guest      @relation(fields: [guestId], references: [id])
  table      Table?     @relation(fields: [tableId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Table {
  id           String     @id @default(uuid())
  number       Int
  capacity     Int
  location     String?
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Reservation Reservation[]

  @@unique([restaurantId, number])
}

model MenuTab {
  id           String     @id @default(uuid())
  name         String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  menus        Menu[]
  order        Int        @default(0)
}

model Menu {
  id            String     @id @default(uuid())
  name          String
  isActive      Boolean    @default(true)
  availableFrom DateTime?
  availableTo   DateTime?
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  items         MenuItem[]
  order         Int        @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  MenuTab   MenuTab? @relation(fields: [menuTabId], references: [id], onDelete: Cascade)
  menuTabId String
}

model MenuItem {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float
  category    String?
  allergens   Int[] // Např. [1, 3, 7] — lepek, vejce, mléko
  menuId      String
  order       Int     @default(0)
  menu        Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id      String  @id @default(uuid())
  type    String
  message String
  isRead  Boolean @default(false)

  guestId String? // FK na Guest
  guest   Guest?  @relation(fields: [guestId], references: [id]) // vztah

  reservationTime DateTime?
  restaurantId    String
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id])

  userId String?
  User   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
